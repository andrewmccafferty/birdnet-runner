[tool.poetry]
name = "birdnet-basic"
version = "0.1.0"
authors = ["andrew"]
description = "Suck on this"

[tool.poetry.dependencies]
python = "^3.10"
birdnetlib = "0.16.0"
tensorflow = "2.16.1"
librosa = "0.10.1"
resampy = "0.4.3"
ffmpeg-python = "0.2.0"
scipy = "1.12.0"
sounddevice = "0.4.6"
requests="2.32.3"


#[tool.poetry.group.dev.dependencies]
#pytest = "^7.2.1"
#pytest-socket = "^0.6.0"
#pytest-cov = "^4.0.0"
#mypy = "^0.991"
#black = "^23.1.0"
#pytest-vcr = "^1.0.2"
#freezegun = "^1.2.2"
#"aws-cdk.aws-lambda-python-alpha" = "~2.33.0-alpha.0"
#constructs = "~10.0.130"
#datadog-cdk-constructs-v2 = "~0.3.4"
#moto = {extras = ["dynamodb", "s3"], version = "^4.1.10"}
#types-requests = "^2.28.11.8"
#ruff = "^0.0.270"
#syrupy = "^4.5.0"
#aws-cdk-lib = "2.86.0"
#
#[build-system]
#requires = ["poetry-core"]
#build-backend = "poetry.core.masonry.api"
#
#[tool.mypy]
#python_version = "3.9"
#files = ["app.py", "deployment_config.py", "shared", "functions", "stack"]
#pretty = true
#ignore_missing_imports = true
#disable_error_code = "misc"
#follow_imports = "silent"
#implicit_reexport = true
#
#[tool.ruff]
## Enforce the following rules. The rules that are commented out are ones that we should
## look to enable in the future but will require work to do so.
#select = [
#    "E", # pyflakes
#    "F", # pycodestyle errors
#    "UP", # pyupgrade
#    "I", # isort
##    "S", # flake8-bandit, security
#    "BLE", # flake8-blind-except
#    "B", # flake8-bugbear
#    "C4", # flake8-comprehensions
#    "DTZ", # flake8-datetimez
#    "ISC", # flake8-implicit-str-concat
#    "ICN", # flake8-import-conventions
#    "INP", # flake8-no-pep420, ensure packages have __init__.py files
#    "PIE", # flake8-pie
#    "T20", # flake8-print
#    "RSE", # flake8-raise
#    "RET", # flake8-return
#    "SLF", # flake8-self, prevent 'private' things from being called
#    "SIM", # flake8-simplify
#    "TCH", # flake8-type-checking
#    "PTH", # flake8-use-pathlib
#    # "ERA", # eradicate, remove commented out code DO NOT ENABLE THIS.
#    "PGH", # pygrep-hooks
#    "PL", # pylint
##    "TRY", # tryceratops, exception handling anti-patterns
#    "RUF", # ruff specific rules
#]
#
#ignore = [
#    "S101", # allows use of `assert` statements, as we control the environment they should be fine
#    "SIM102", # Allow nesting multiple `if` statements. Sometimes this is just more readable.
#]
#
#unfixable = [
#    "F841", # Detect, but don't "fix" unused variables (ruff auto-deletes them if found)
#]
#
## Setting this much higher than black, we should aim for around 88 but don't want to be
## dinged if we need to go over this, perhaps reduce in future.
#line-length = 120
#target-version = "py39"
#
## The default max of 5 is silly and arbitrary. We do have legitimate cases where we need
## more than 5 arguments. This is Python after all.
#pylint.max-args = 12
#
#
#[tool.ruff.per-file-ignores]
#"tests/*" = [
#    "PLR2004"  # allow magic numbers in tests
#]
#"tests/conftest.py" = ["E402"]
#"deployment_config/*" = [
#    "C408" # Do not require dict literals in deployment config (improves readability)
#]
#"shared/services/email.py" = [
#    "E722" # Allow catch all so email cusomisation exceptions don't stop emails being sent
#]
